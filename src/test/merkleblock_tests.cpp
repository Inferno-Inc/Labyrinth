// Copyright (c) 2012-2020 The Bitcoin Core developers
// Copyright (c) 2021-2022 The Labyrinth Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <merkleblock.h>
#include <util/strencodings.h>
#include <test/util/setup_common.h>
#include <streams.h>
#include <uint256.h>

#include <boost/test/unit_test.hpp>


BOOST_FIXTURE_TEST_SUITE(merkleblock_tests, BasicTestingSetup)

/**
 * Create a CMerkleBlock using a list of txids which will be found in the
 * given block.
 */
BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_found)
{
    /**
    * Random test block (0000000282bbee4fa784b3ec68bb7d27c7fc4ea18e8255d759bc1ffbe488239d)
    *      with 9 txs.
    */
    CBlock block;
    CDataStream stream(ParseHex("000000208859791d91f1fdc755a31a2ceb73c0c858823bf20bdf1ab43d72257604000000c69763e28f772295303a8372096fbcbb9c12b9598785a4d099d4b02b81744cbc31b05063b9c8071d6e0000005e95590101000000c6f5e529c74492efb8d55defe066aff3e2fc3644d4bbbc322ae0e507916dba7e09010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff1a016e0431b05063083030303030303031094c61627972696e7468ffffffff0300ca9a3b000000001976a9145ee350cbff1fba6c004b25de65f537544700ee7b88acc0cf7318020000001976a91484c6881f7cbdb3a2200b594dcfd9270dc1b9e1eb88ac0000000000000000266a24aa21a9ed49be7e419b80c74055825e99553505765f37119d628244cf1d8f261e479692e40120000000000000000000000000000000000000000000000000000000000000000000000000020000000101e8a4140ae5749080180091b701375e89b1d13354843c679031e46e0f3dd336010000006a473044022022a8f50c21d66db1d85f24b7cac6c6a316a8f7279f46a2bbb9a5437c941a36f902201c2d355631a042ccc5d9727caee2b8d3e9c50cb4e95ec000b95f5f116e08edb70121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc0100000016001406ba589d91d9818813c5a7a343a506e18b1730a60000000002000000010105ae121d2aa68ea13b0bd04809a821a22641b44de8634512dbee9de45e934d010000006a47304402206e81f9d9135107fe5b7c8dcb38119486fd39d32ff63a7c8479d00dbc2e5ec4bf0220756b8f1eb16153edaf594099c5ef1bbb68d8a65debe12ec3bf8359b2de1d80ce0121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc010000001600142c1e571f447910332e1b7fbfdb0292ecf0d15e22000000000200000001e00c913e188e7f6ec4b345fcf387fa7bce7378bd0f7a928f3b8439acdbe87117010000006a47304402205fe60cb8e54703e79b3d0b514a85de6816371d1a6dbea93c5196d5b4f7df3c6302205c4a06106763481d69b1c542f319d8ffe9ffcf875c7c9285a6283bca9fd678a30121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc01000000160014f56caa1763a6bbafae0753d68e7a99236bca3a1200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000020000000189c55073612db9544c8690619d77b2d87411914ce3204754908c473e8ef4d03f010000006a4730440220098bfa37516dfb771965223c69f25a8ce043ec77183c4ca00ea48e51066f41360220053dfa462f7bf88444301b3c3552f497dbf7c53c4f9b8259694926f32b23f9890121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc010000001600145781b32310ea53af9185c160eb5ff07d5d113c2500ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000020000000124f7ae77b35b8a6a6af1f98fd7b22b9c92b4d67b3f0e1b541e7dab2805e66b44010000006a47304402203950880fffcfb5734011a13bd687ed2b364e5e5eb26badfbc3507ce5505992ce0220232a8de014081a412f533580e42fcc988fafe66e7fb34eef0d4d9c824fd723a80121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc01000000160014482b1815bb2495234089b37e4d71bfd69f7a3d9200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000020000000178b595c382ecf7d1ef1090eb1a714c7b704141e3a4d81729b08f78066baa72a4010000006a47304402207ca2b584c0323c91bfcffadf3714fedd2f504467035c689dd48ce13ce2c94c1e0220207c18b03f089575c2f8bb8524057656f450341a02982b2e2c97cbf66c7f16b70121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc0100000016001490200e889130d1ffb1e16bcbea3d0cb16b4799a4000000000200000001b3b9d74385efb4e8bd7f72e1d999c00c79797d52b953e85fb3bce768a2310823010000006a47304402207b9d886c8b17adf2ba48e016e67198a3df3adcbf5efdd7e6e986fcaceb535c270220686a2a478c280abdbd6e402bb4fedd3a11693c3eff480f3293969f7a490268410121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc01000000160014411ec56790f0fda490312d6b90b28a594282f7410000000002000000013ebeff59bc2a93bab2b49abc5eed9086024cc5709921fed80fd40554a27160e7010000006a473044022051810355bdfeece92801b70e1b3afb90ab4e2b65e6e7002c55990e5b2f34829a022015f9001f55ba44504f27635c917e28fd4eb704ae0a529c3e51342d514b5205f30121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc01000000160014e0fad10a0fd073029855db2cde664a1ba592f30200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    std::set<uint256> txids;

    // Last txn in block.
    uint256 txhash1 = uint256S("0xbf88c9e7af7c712695e02fb06612b33a38e6f494109b8259695236f486fa0dfd");

    // Second txn in block.
    uint256 txhash2 = uint256S("0x81b5b94e9a46a9e805a05f4566c47df703e2c32145b04f56326e9cda9b610b66");

    txids.insert(txhash1);
    txids.insert(txhash2);

    CMerkleBlock merkleBlock(block, txids);

    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());

    // vMatchedTxn is only used when bloom filter is specified.
    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0U);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;

    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());
    BOOST_CHECK_EQUAL(vMatched.size(), 2U);

    // Ordered by occurrence in depth-first tree traversal.
    BOOST_CHECK_EQUAL(vMatched[0].ToString(), txhash2.ToString());
    BOOST_CHECK_EQUAL(vIndex[0], 1U);

    BOOST_CHECK_EQUAL(vMatched[1].ToString(), txhash1.ToString());
    BOOST_CHECK_EQUAL(vIndex[1], 8U);
}


/**
 * Create a CMerkleBlock using a list of txids which will not be found in the
 * given block.
 */
BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_not_found)
{
    /**
    * Random test block (0000000282bbee4fa784b3ec68bb7d27c7fc4ea18e8255d759bc1ffbe488239d)
    *      with 9 txs.
    */
    CBlock block;
    CDataStream stream(ParseHex("000000208859791d91f1fdc755a31a2ceb73c0c858823bf20bdf1ab43d72257604000000c69763e28f772295303a8372096fbcbb9c12b9598785a4d099d4b02b81744cbc31b05063b9c8071d6e0000005e95590101000000c6f5e529c74492efb8d55defe066aff3e2fc3644d4bbbc322ae0e507916dba7e09010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff1a016e0431b05063083030303030303031094c61627972696e7468ffffffff0300ca9a3b000000001976a9145ee350cbff1fba6c004b25de65f537544700ee7b88acc0cf7318020000001976a91484c6881f7cbdb3a2200b594dcfd9270dc1b9e1eb88ac0000000000000000266a24aa21a9ed49be7e419b80c74055825e99553505765f37119d628244cf1d8f261e479692e40120000000000000000000000000000000000000000000000000000000000000000000000000020000000101e8a4140ae5749080180091b701375e89b1d13354843c679031e46e0f3dd336010000006a473044022022a8f50c21d66db1d85f24b7cac6c6a316a8f7279f46a2bbb9a5437c941a36f902201c2d355631a042ccc5d9727caee2b8d3e9c50cb4e95ec000b95f5f116e08edb70121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc0100000016001406ba589d91d9818813c5a7a343a506e18b1730a60000000002000000010105ae121d2aa68ea13b0bd04809a821a22641b44de8634512dbee9de45e934d010000006a47304402206e81f9d9135107fe5b7c8dcb38119486fd39d32ff63a7c8479d00dbc2e5ec4bf0220756b8f1eb16153edaf594099c5ef1bbb68d8a65debe12ec3bf8359b2de1d80ce0121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc010000001600142c1e571f447910332e1b7fbfdb0292ecf0d15e22000000000200000001e00c913e188e7f6ec4b345fcf387fa7bce7378bd0f7a928f3b8439acdbe87117010000006a47304402205fe60cb8e54703e79b3d0b514a85de6816371d1a6dbea93c5196d5b4f7df3c6302205c4a06106763481d69b1c542f319d8ffe9ffcf875c7c9285a6283bca9fd678a30121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc01000000160014f56caa1763a6bbafae0753d68e7a99236bca3a1200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000020000000189c55073612db9544c8690619d77b2d87411914ce3204754908c473e8ef4d03f010000006a4730440220098bfa37516dfb771965223c69f25a8ce043ec77183c4ca00ea48e51066f41360220053dfa462f7bf88444301b3c3552f497dbf7c53c4f9b8259694926f32b23f9890121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc010000001600145781b32310ea53af9185c160eb5ff07d5d113c2500ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000020000000124f7ae77b35b8a6a6af1f98fd7b22b9c92b4d67b3f0e1b541e7dab2805e66b44010000006a47304402203950880fffcfb5734011a13bd687ed2b364e5e5eb26badfbc3507ce5505992ce0220232a8de014081a412f533580e42fcc988fafe66e7fb34eef0d4d9c824fd723a80121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc01000000160014482b1815bb2495234089b37e4d71bfd69f7a3d9200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000020000000178b595c382ecf7d1ef1090eb1a714c7b704141e3a4d81729b08f78066baa72a4010000006a47304402207ca2b584c0323c91bfcffadf3714fedd2f504467035c689dd48ce13ce2c94c1e0220207c18b03f089575c2f8bb8524057656f450341a02982b2e2c97cbf66c7f16b70121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc0100000016001490200e889130d1ffb1e16bcbea3d0cb16b4799a4000000000200000001b3b9d74385efb4e8bd7f72e1d999c00c79797d52b953e85fb3bce768a2310823010000006a47304402207b9d886c8b17adf2ba48e016e67198a3df3adcbf5efdd7e6e986fcaceb535c270220686a2a478c280abdbd6e402bb4fedd3a11693c3eff480f3293969f7a490268410121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac48f9d5dc01000000160014411ec56790f0fda490312d6b90b28a594282f7410000000002000000013ebeff59bc2a93bab2b49abc5eed9086024cc5709921fed80fd40554a27160e7010000006a473044022051810355bdfeece92801b70e1b3afb90ab4e2b65e6e7002c55990e5b2f34829a022015f9001f55ba44504f27635c917e28fd4eb704ae0a529c3e51342d514b5205f30121038060740d271c5463286ff3ff84e4f6813187cebbe4584e0e85506bd04f45efc2fdffffff0248f9d5dc01000000160014e0fad10a0fd073029855db2cde664a1ba592f30200ca9a3b000000001976a9144d5ebe5c4471ef240ecee3809546dcc7249d18dc88ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    std::set<uint256> txids2;
    txids2.insert(uint256S("0x186dc176c22dcf6a1ccabd40e8a1354f4db587b5b9c6c9100010db918d871af0"));
    CMerkleBlock merkleBlock(block, txids2);

    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());
    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0U);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;

    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());
    BOOST_CHECK_EQUAL(vMatched.size(), 0U);
    BOOST_CHECK_EQUAL(vIndex.size(), 0U);
}

BOOST_AUTO_TEST_SUITE_END()
